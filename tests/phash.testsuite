## -*- tcl -*-
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Test suite for phash stores, common parts across implementations.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.
#
## The external procedures 'new-store' and 'release-store' are used to
## create and destroy an instance of the store under test.

# ------------*----------------
# dispatch    | *
# destroy     | *
# ------------*----------------
# clear       | *
# exists      | *
# get         | *
# getv        | *
# names       | *
# set         | *
# setv        | *
# size        | *
# unset       | *
# unsetv      | *
# ------------*----------------

# # ## ### ##### ######## ############# #####################
## dispatch

test phash::[who]-dispatch-1.0 {instance, no method} -setup {
    new-store
} -body {
    myphash
} -cleanup {
    release-store
} -returnCodes error \
    -result {wrong # args: should be "myphash method ?arg ...?"}

test phash::[who]-dispatch-1.1 {instance, bad method name} -setup {
    new-store
} -body {
    myphash foo
} -cleanup {
    release-store
} -returnCodes error \
    -result [badmethod foo {clear destroy exists get getv names set setv size unset unsetv}]

# # ## ### ##### ######## ############# #####################
## destructor

test phash::[who]-destroy-1.0 {destroy, wrong#args, too many} -setup {
    new-store
} -body {
    myphash destroy X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash destroy"}

test phash::[who]-destroy-1.1 {destroy} -setup {
    new-store
} -body {
    release-store
    info commands ::myphash
} -result {}

# # ## ### ##### ######## ############# #####################
## clear

test phash::[who]-clear-1.0 {clear, wrong#args, too many} -setup {
    new-store
} -body {
    myphash clear S
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash clear"}

test phash::[who]-clear-1.1 {clear, none} -setup {
    new-store
} -body {
    list [myphash size] [myphash clear] [myphash size]
} -cleanup {
    release-store
} -result {0 {} 0}

test phash::[who]-clear-1.2 {clear, some} -setup {
    new-store
    myphash setv S C
    myphash setv A R
    myphash setv R A
    myphash setv C S
} -body {
    list [myphash size] [myphash clear] [myphash size]
} -cleanup {
    release-store
} -result {4 {} 0}

# # ## ### ##### ######## ############# #####################
## exists

test phash::[who]-exists-1.0 {exists, wrong#args, not enough} -setup {
    new-store
} -body {
    myphash exists
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash exists key"}

test phash::[who]-exists-1.1 {exists, wrong#args, too many} -setup {
    new-store
} -body {
    myphash exists S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash exists key"}

test phash::[who]-exists-1.2 {exists, no} -setup {
    new-store
} -body {
    myphash exists S
} -cleanup {
    release-store
} -result 0

test phash::[who]-exists-1.3 {exists, yes} -setup {
    new-store
    myphash setv S A
} -body {
    myphash exists S
} -cleanup {
    release-store
} -result 1

# # ## ### ##### ######## ############# #####################
## get

test phash::[who]-get-1.0 {get, wrong#args, too many} -setup {
    new-store
} -body {
    myphash get X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash get"}

test phash::[who]-get-1.1 {get, nothing} -setup {
    new-store
} -body {
    myphash get
} -cleanup {
    release-store
} -result {}

test phash::[who]-get-1.2 {get, some} -setup {
    new-store
    myphash setv S C
    myphash setv A R
    myphash setv R A
    myphash setv C S
} -body {
    kt dictsort [myphash get]
} -cleanup {
    release-store
} -result {A R C S R A S C}

# # ## ### ##### ######## ############# #####################
## getv

test phash::[who]-getv-1.0 {getv, wrong#args, not enough} -setup {
    new-store
} -body {
    myphash getv
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash getv key"}

test phash::[who]-getv-1.1 {getv, wrong#args, too many} -setup {
    new-store
} -body {
    myphash getv S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash getv key"}

test phash::[who]-getv-1.2 {getv, unknown key} -setup {
    new-store
} -body {
    myphash getv 0
} -cleanup {
    release-store
} -returnCodes error -result {Expected key, got "0"}

test phash::[who]-getv-1.3 {getv, known} -setup {
    new-store
    myphash setv S S
} -body {
    myphash getv S
} -cleanup {
    release-store
} -result S

test phash::[who]-getv-1.4 {getv, known} -setup {
    new-store
    myphash setv S C
    myphash setv A R
    myphash setv R A
    myphash setv C S
} -body {
    myphash getv A
} -cleanup {
    release-store
} -result R

# # ## ### ##### ######## ############# #####################
## names

test phash::[who]-names-1.0 {names, wrong#args, too many} -setup {
    new-store
} -body {
    myphash names S
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash names"}

test phash::[who]-names-1.1 {names, none} -setup {
    new-store
} -body {
    myphash names
} -cleanup {
    release-store
} -result {}

test phash::[who]-names-1.2 {names, some} -setup {
    new-store
    myphash setv S C
    myphash setv A R
    myphash setv R A
    myphash setv C S
} -body {
    lsort -dict [myphash names]
} -cleanup {
    release-store
} -result {A C R S}

# # ## ### ##### ######## ############# #####################
## set

test phash::[who]-set-1.0 {set, wrong#args, not enough} -setup {
    new-store
} -body {
    myphash set
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash set dict"}

test phash::[who]-set-1.1 {set, wrong#args, too many} -setup {
    new-store
} -body {
    myphash set D X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash set dict"}

test phash::[who]-set-1.2 {set} -setup {
    new-store
} -body {
    myphash set {A B X Z C R}
    kt dictsort [myphash get]
} -cleanup {
    release-store
} -result {A B C R X Z}

# # ## ### ##### ######## ############# #####################
## setv

test phash::[who]-setv-1.0 {setv, wrong#args, not enough} -setup {
    new-store
} -body {
    myphash setv
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash setv key value"}

test phash::[who]-setv-1.1 {setv, wrong#args, not enough} -setup {
    new-store
} -body {
    myphash setv K
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash setv key value"}

test phash::[who]-setv-1.2 {setv, wrong#args, too many} -setup {
    new-store
} -body {
    myphash setv K V X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash setv key value"}

test phash::[who]-setv-1.3 {setv} -setup {
    new-store
} -body {
    myphash setv A B
} -cleanup {
    release-store
} -result B

# # ## ### ##### ######## ############# #####################
## size

test phash::[who]-size-1.0 {size, wrong#args, too many} -setup {
    new-store
} -body {
    myphash size X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash size"}

test phash::[who]-size-1.1 {size} -setup {
    new-store
    myphash setv A B
} -body {
    myphash size
} -cleanup {
    release-store
} -result 1

test phash::[who]-size-1.2 {size} -setup {
    new-store
    myphash setv A B
    myphash setv B C
} -body {
    myphash size
} -cleanup {
    release-store
} -result 2

# # ## ### ##### ######## ############# #####################
## unset

test phash::[who]-unset-1.0 {unset, wrong#args, too many} -setup {
    new-store
} -body {
    myphash unset P X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash unset ?pattern?"}

test phash::[who]-unset-1.1 {unset} -setup {
    new-store
    myphash set {A B AX Z C R}
} -body {
    myphash unset A*
    kt dictsort [myphash get]
} -cleanup {
    release-store
} -result {C R}

test phash::[who]-unset-1.2 {unset} -setup {
    new-store
    myphash set {A B AX Z C R}
} -body {
    myphash unset
    kt dictsort [myphash get]
} -cleanup {
    release-store
} -result {}

# # ## ### ##### ######## ############# #####################
## unsetv

test phash::[who]-unsetv-1.0 {unsetv, wrong#args, not enough} -setup {
    new-store
} -body {
    myphash unsetv
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash unsetv key"}

test phash::[who]-unsetv-1.1 {unsetv, wrong#args, too many} -setup {
    new-store
} -body {
    myphash unsetv K X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "myphash unsetv key"}

test phash::[who]-unsetv-1.2 {unsetv, known} -setup {
    new-store
    myphash set {A B AX Z C R}
} -body {
    myphash unsetv A
    kt dictsort [myphash get]
} -cleanup {
    release-store
} -result {AX Z C R}

test phash::[who]-unsetv-1.3 {unsetv, unknown} -setup {
    new-store
    myphash set {A B AX Z C R}
} -body {
    myphash unsetv B
} -cleanup {
    release-store
} -returnCodes error -result {Expected key, got "B"}

# # ## ### ##### ######## ############# #####################
return
