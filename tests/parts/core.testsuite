## -*- tcl -*-
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Test suite for phash stores, core common parts across APIs.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.
#
## The external procedures 'new-store' and 'release-store' are used to
## create and destroy an instance of the store under test. The expected
## instance command is 'teststore'.

# # ## ### ##### ######## ############# #####################
## dispatch

test [test-class]-common::core-dispatch-1.0 {instance, no method} -setup {
    new-store
} -body {
    test-store
} -cleanup {
    release-store
} -returnCodes error \
    -result {wrong # args: should be "test-store method ?arg ...?"}

# # ## ### ##### ######## ############# #####################
## destructor

test [test-class]-common::core-destroy-1.0 {destroy, wrong#args, too many} -setup {
    new-store
} -body {
    test-store destroy X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store destroy"}

test [test-class]-common::core-destroy-1.1 {destroy} -setup {
    new-store
} -body {
    release-store
    info commands ::test-store
} -result {}

# # ## ### ##### ######## ############# #####################
## clear

test [test-class]-common::core-clear-1.0 {clear, wrong#args, too many} -setup {
    new-store
} -body {
    test-store clear S
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store clear"}

test [test-class]-common::core-clear-1.1 {clear, none} -setup {
    new-store
} -body {
    list [test-store size] [test-store clear] [test-store size]
} -cleanup {
    release-store
} -result {0 {} 0}

test [test-class]-common::core-clear-1.2 {clear, some} -setup {
    new-store
    test-store setv S C
    test-store setv A R
    test-store setv R A
    test-store setv C S
} -body {
    list [test-store size] [test-store clear] [test-store size]
} -cleanup {
    release-store
} -result {4 {} 0}

# # ## ### ##### ######## ############# #####################
## exists

test [test-class]-common::core-exists-1.0 {exists, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store exists
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store exists key"}

test [test-class]-common::core-exists-1.1 {exists, wrong#args, too many} -setup {
    new-store
} -body {
    test-store exists S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store exists key"}

test [test-class]-common::core-exists-1.2 {exists, no} -setup {
    new-store
} -body {
    test-store exists S
} -cleanup {
    release-store
} -result 0

test [test-class]-common::core-exists-1.3 {exists, yes} -setup {
    new-store
    test-store setv S A
} -body {
    test-store exists S
} -cleanup {
    release-store
} -result 1

# # ## ### ##### ######## ############# #####################
## get

test [test-class]-common::core-get-1.0 {get, wrong#args, too many} -setup {
    new-store
} -body {
    test-store get P X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store get ?pattern?"}

test [test-class]-common::core-get-1.1 {get, nothing} -setup {
    new-store
} -body {
    test-store get
} -cleanup {
    release-store
} -result {}

test [test-class]-common::core-get-1.2 {get, all} -setup {
    new-store
    test-store setv S C
    test-store setv A R
    test-store setv R A
    test-store setv C S
} -body {
    kt dictsort [test-store get]
} -cleanup {
    release-store
} -result {A R C S R A S C}

test [test-class]-common::core-get-1.3 {get, some} -setup {
    new-store
    test-store setv S C
    test-store setv A R
    test-store setv R A
    test-store setv C S
} -body {
    kt dictsort [test-store get {[AR]}]
} -cleanup {
    release-store
} -result {A R R A}

# # ## ### ##### ######## ############# #####################
## getv

test [test-class]-common::core-getv-1.0 {getv, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store getv
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store getv key"}

test [test-class]-common::core-getv-1.1 {getv, wrong#args, too many} -setup {
    new-store
} -body {
    test-store getv S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store getv key"}

test [test-class]-common::core-getv-1.2 {getv, unknown key} -setup {
    new-store
} -body {
    test-store getv 0
} -cleanup {
    release-store
} -returnCodes error -result {Expected key, got "0"}

test [test-class]-common::core-getv-1.3 {getv, known} -setup {
    new-store
    test-store setv S S
} -body {
    test-store getv S
} -cleanup {
    release-store
} -result S

test [test-class]-common::core-getv-1.4 {getv, known} -setup {
    new-store
    test-store setv S C
    test-store setv A R
    test-store setv R A
    test-store setv C S
} -body {
    test-store getv A
} -cleanup {
    release-store
} -result R

# # ## ### ##### ######## ############# #####################
## names

test [test-class]-common::core-names-1.0 {names, wrong#args, too many} -setup {
    new-store
} -body {
    test-store names S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store names ?pattern?"}

test [test-class]-common::core-names-1.1 {names, none} -setup {
    new-store
} -body {
    test-store names
} -cleanup {
    release-store
} -result {}

test [test-class]-common::core-names-1.2 {names, all} -setup {
    new-store
    test-store setv S C
    test-store setv A R
    test-store setv R A
    test-store setv C S
} -body {
    lsort -dict [test-store names]
} -cleanup {
    release-store
} -result {A C R S}

test [test-class]-common::core-names-1.3 {names, some} -setup {
    new-store
    test-store setv S C
    test-store setv A R
    test-store setv R A
    test-store setv C S
} -body {
    lsort -dict [test-store names {[AR]}]
} -cleanup {
    release-store
} -result {A R}

# # ## ### ##### ######## ############# #####################
## set

test [test-class]-common::core-set-1.0 {set, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store set
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store set dict"}

test [test-class]-common::core-set-1.1 {set, wrong#args, too many} -setup {
    new-store
} -body {
    test-store set D X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store set dict"}

test [test-class]-common::core-set-1.2 {set} -setup {
    new-store
} -body {
    list [test-store set {A B X Z C R}] [kt dictsort [test-store get]]
} -cleanup {
    release-store
} -result {{} {A B C R X Z}}

# # ## ### ##### ######## ############# #####################
## setv

test [test-class]-common::core-setv-1.3 {setv} -setup {
    new-store
} -body {
    test-store setv A B
} -cleanup {
    release-store
} -result B

test [test-class]-common::core-setv-1.4 {setv, replace} -setup {
    new-store
    test-store setv A B
} -body {
    test-store setv A C
    test-store getv A
} -cleanup {
    release-store
} -result C

# # ## ### ##### ######## ############# #####################
## size

test [test-class]-common::core-size-1.0 {size, wrong#args, too many} -setup {
    new-store
} -body {
    test-store size X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store size"}

test [test-class]-common::core-size-1.1 {size} -setup {
    new-store
    test-store setv A B
} -body {
    test-store size
} -cleanup {
    release-store
} -result 1

test [test-class]-common::core-size-1.2 {size} -setup {
    new-store
    test-store setv A B
    test-store setv B C
} -body {
    test-store size
} -cleanup {
    release-store
} -result 2

# # ## ### ##### ######## ############# #####################
## unset

test [test-class]-common::core-unset-1.0 {unset, wrong#args, too many} -setup {
    new-store
} -body {
    test-store unset P X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store unset ?pattern?"}

test [test-class]-common::core-unset-1.1 {unset, some, not empty} -setup {
    new-store
    test-store set {A B AX Z C R}
} -body {
    test-store unset A*
    kt dictsort [test-store get]
} -cleanup {
    release-store
} -result {C R}

test [test-class]-common::core-unset-1.2 {unset, all, not empty} -setup {
    new-store
    test-store set {A B AX Z C R}
} -body {
    test-store unset
    kt dictsort [test-store get]
} -cleanup {
    release-store
} -result {}

test [test-class]-common::core-unset-1.3 {unset, some/none, empty} -setup {
    new-store
} -body {
    test-store unset A*
    test-store get
} -cleanup {
    release-store
} -result {}

test [test-class]-common::core-unset-1.4 {unset, all/none, empty} -setup {
    new-store
} -body {
    test-store unset
    test-store get
} -cleanup {
    release-store
} -result {}


# # ## ### ##### ######## ############# #####################
## unsetv

test [test-class]-common::core-unsetv-1.0 {unsetv, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store unsetv
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store unsetv key"}

test [test-class]-common::core-unsetv-1.1 {unsetv, wrong#args, too many} -setup {
    new-store
} -body {
    test-store unsetv K X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store unsetv key"}

test [test-class]-common::core-unsetv-1.2 {unsetv, known} -setup {
    new-store
    test-store set {A B AX Z C R}
} -body {
    test-store unsetv A
    kt dictsort [test-store get]
} -cleanup {
    release-store
} -result {AX Z C R}

test [test-class]-common::core-unsetv-1.3 {unsetv, unknown, not empty} -setup {
    new-store
    test-store set {A B AX Z C R}
} -body {
    test-store unsetv B
} -cleanup {
    release-store
} -returnCodes error -result {Expected key, got "B"}

test [test-class]-common::core-unsetv-1.4 {unsetv, unknown, empty} -setup {
    new-store
} -body {
    test-store unsetv B
} -cleanup {
    release-store
} -returnCodes error -result {Expected key, got "B"}

# # ## ### ##### ######## ############# #####################
return
