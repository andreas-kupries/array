## -*- tcl -*-
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Test suite for phash::mtime stores, common parts across implementations.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.
#
## The external procedures 'new-store' and 'release-store' are used to
## create and destroy an instance of the store under test.

# # ## ### ##### ######## ############# #####################
## dispatch

test [test-class]-dispatch-1.1 {instance, bad method name} -setup {
    new-store
} -body {
    test-store foo
} -cleanup {
    release-store
} -returnCodes error \
    -result [badmethod foo {clear destroy exists export get get-time get-timev getv names set set-timev setv size unset unsetv}]

# # ## ### ##### ######## ############# #####################
## get-time

test [test-class]-get-time-1.0 {get-time, wrong#args, too many} -setup {
    new-store
} -body {
    test-store get-time P X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store get-time ?pattern?"}

test [test-class]-get-time-1.1 {get-time, nothing} -setup {
    new-store
} -body {
    test-store get-time
} -cleanup {
    release-store
} -result {}

test [test-class]-get-time-1.2 {get-time, all} -setup {
    new-store
    test-store setv S C 3
    test-store setv A R 4
    test-store setv R A 5
    test-store setv C S 6
} -body {
    kt dictsort [test-store get-time]
} -cleanup {
    release-store
} -result {A 4 C 6 R 5 S 3}

test [test-class]-get-time-1.3 {get-time, some} -setup {
    new-store
    test-store setv S C 3
    test-store setv A R 4
    test-store setv R A 5
    test-store setv C S 6
} -body {
    kt dictsort [test-store get-time {[AR]}]
} -cleanup {
    release-store
} -result {A 4 R 5}

# # ## ### ##### ######## ############# #####################
## get-timev

test [test-class]-get-timev-1.0 {get-timev, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store get-timev
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store get-timev key"}

test [test-class]-get-timev-1.1 {get-timev, wrong#args, too many} -setup {
    new-store
} -body {
    test-store get-timev S X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store get-timev key"}

test [test-class]-get-timev-1.2 {get-timev, unknown key} -setup {
    new-store
} -body {
    test-store get-timev 0
} -cleanup {
    release-store
} -returnCodes error -result {Expected key, got "0"}

test [test-class]-get-timev-1.3 {get-timev, known} -setup {
    new-store
    test-store setv S S 7
} -body {
    test-store get-timev S
} -cleanup {
    release-store
} -result 7

test [test-class]-get-timev-1.4 {get-timev, known} -setup {
    new-store
    test-store setv S C 3
    test-store setv A R 6
    test-store setv R A 9
    test-store setv C S 0
} -body {
    test-store get-timev A
} -cleanup {
    release-store
} -result 6

# # ## ### ##### ######## ############# #####################
## setv

test [test-class]-setv-1.0 {setv, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store setv
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store setv key value ?time?"}

test [test-class]-setv-1.1 {setv, wrong#args, not enough} -setup {
    new-store
} -body {
    test-store setv K
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store setv key value ?time?"}

test [test-class]-setv-1.2 {setv, wrong#args, too many} -setup {
    new-store
} -body {
    test-store setv K V T X
} -cleanup {
    release-store
} -returnCodes error -result {wrong # args: should be "test-store setv key value ?time?"}

test [test-class]-setv-1.5 {setv, explicit time} -setup {
    new-store
    set n [clock seconds]
} -body {
    test-store setv A B 5
    test-store get-timev A
} -cleanup {
    release-store
} -result 5

test [test-class]-setv-1.6 {setv, bad time} -setup {
    new-store
} -body {
    test-store setv A B C
} -cleanup {
    release-store
} -returnCodes error -result {Expected a time, got "C"}

# # ## ### ##### ######## ############# #####################

proc serial-prefix {} { return phash::mtime }
proc serial-args   {} { return {dictv dictt} }
proc serial-setup  {} {
    test-store set-timev a 0
    test-store set-timev b 0
}
proc serial-result-js {} {
    return {{"a":["x","1970-01-01T00:00:00"],"b":["c","1970-01-01T00:00:00"]}}
}
proc serial-result-je {} {
    return {{"check":"d2b5743d7f11a9fe10d9926c924ca777","data":{"a":["x","1970-01-01T00:00:00"],"b":["c","1970-01-01T00:00:00"]},"type":"atest","user":"me","when":"1970-01-01T00:00:00"}}
}

kt source parts/core.testsuite

# # ## ### ##### ######## ############# #####################
return
