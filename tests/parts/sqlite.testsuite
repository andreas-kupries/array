## -*- tcl -*-
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Test suite for sqlite stores, custom parts.
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.
#
## The external procedure 'test-class' provides the class name for use
## in test case labels, and messages. 'store-class' for construction.

# # ## ### ##### ######## ############# #####################

test [test-class]-specific-1.0 {new, wrong#args, not enough} -body {
    [store-class] new
} -returnCodes error -result "wrong # args: should be \"[store-class] new database table\""

test [test-class]-specific-1.1 {new, wrong#args, not enough} -body {
    [store-class] new D
} -returnCodes error -result "wrong # args: should be \"[store-class] new database table\""

test [test-class]-specific-1.2 {new, wrong#args, too many} -body {
    [store-class] new D T X
} -returnCodes error -result "wrong # args: should be \"[store-class] new database table\""

test [test-class]-specific-1.3 {create, wrong#args, not enough} -body {
    [store-class] create foo
} -returnCodes error -result "wrong # args: should be \"[store-class] create foo database table\""

test [test-class]-specific-1.4 {create, wrong#args, not enough} -body {
    [store-class] create foo D
} -returnCodes error -result "wrong # args: should be \"[store-class] create foo database table\""

test [test-class]-specific-1.5 {create, wrong#args, too many} -body {
    [store-class] create foo D T X
} -returnCodes error -result "wrong # args: should be \"[store-class] create foo database table\""

test [test-class]-specific-1.6 {constructor, create, existing command} -setup {
    sqlite3 DB :memory:
    [store-class] create sqlite-test-store DB foo
} -body {
    [store-class] create sqlite-test-store DB foo
} -cleanup {
    sqlite-test-store destroy
    DB close
} -returnCodes error -result [already sqlite-test-store]

test [test-class]-specific-1.7 {constructor, create, existing command} -setup {
    sqlite3 DB :memory:
} -body {
    [store-class] create set DB foo
} -cleanup {
    DB close
} -returnCodes error -result [already set]

test [test-class]-specific-1.8 {constructor, create} -setup {
    set result {}
    sqlite3 DB :memory:
} -body {
    lappend result [[store-class] create sqlite-test-store DB foo]
    lappend result [info commands ::sqlite-test-store]
    lappend result [sqlite-test-store size]
} -cleanup {
    sqlite-test-store destroy
    DB close
    unset result
} -result {::sqlite-test-store ::sqlite-test-store 0}

test [test-class]-specific-1.9 {constructor, new} -setup {
    set result {}
    sqlite3 DB :memory:
} -body {
    lappend result [set foo [[store-class] new DB foo]]
    lappend result [info commands ::$foo]
    lappend result [$foo size]
} -cleanup {
    $foo destroy
    DB close
    unset result foo
} -match glob -result {::oo::Obj* ::oo::Obj* 0}

# # ## ### ##### ######## ############# #####################
return
