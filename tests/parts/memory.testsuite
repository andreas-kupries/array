## -*- tcl -*-
## (c) 2013 Andreas Kupries
# # ## ### ##### ######## ############# #####################
## Test suite for memory stores, life-cycle, class specific.
## Suitable for base-, mtime-, and multi-derived stores
## (Identical (de)constructor APIs).
#
## The external procedures 'already' and 'badmethod' are used to
## generate implementation specific error messages. Implementations
## have to be provided by the invoking implementation-specific
## testsuite.
#
## The external procedure 'test-class' provides the class name for use
## in test case labels, messages, and construction.

# # ## ### ##### ######## ############# #####################

test [test-class]-specific-1.0 {new, wrong#args, too many} -body {
    [test-class] new X
} -returnCodes error -result "wrong # args: should be \"[test-class] new\""

test [test-class]-specific-1.1 {create, wrong#args, too many} -body {
    [test-class] create mem-test-store X
} -returnCodes error -result "wrong # args: should be \"[test-class] create mem-test-store\""

test [test-class]-specific-1.2 {constructor, create, existing command} -setup {
    [test-class] create mem-test-store
} -body {
    [test-class] create mem-test-store
} -cleanup {
    mem-test-store destroy
} -returnCodes error -result [already mem-test-store]

test [test-class]-specific-1.3 {constructor, create, existing command} -body {
    [test-class] create set
} -returnCodes error -result [already set]

test [test-class]-specific-1.4 {constructor, create} -setup {
    set result {}
} -body {
    lappend result [[test-class] create mem-test-store]
    lappend result [info commands ::mem-test-store]
    lappend result [mem-test-store size]
} -cleanup {
    mem-test-store destroy
    unset result
} -result {::mem-test-store ::mem-test-store 0}

test [test-class]-specific-1.5 {constructor, new} -setup {
    set result {}
} -body {
    lappend result [set foo [[test-class] new]]
    lappend result [info commands ::$foo]
    lappend result [$foo size]
} -cleanup {
    $foo destroy
    unset result foo
} -match glob -result {::oo::Obj* ::oo::Obj* 0}

# # ## ### ##### ######## ############# #####################
return
